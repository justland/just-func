{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$comment": "Completion schema do not have minItems/maxItems so that editor can list all operators",
  "description": "Code completion schema or just-func. Just a functional programming language",
  "$id": "JustFunc",
  "anyOf": [
    {
      "$ref": "#/definitions/JustFunctions"
    },
    {
      "$ref": "#/definitions/JustLiteral"
    },
    {
      "$ref": "#/definitions/JustLogical"
    },
    {
      "$ref": "#/definitions/JustKeywords"
    },
    {
      "$ref": "#/definitions/JustString"
    },
    {
      "$ref": "#/definitions/JustMath"
    }
  ],
  "definitions": {
    "JustLiteral": {
      "type": [
        "boolean",
        "string",
        "number",
        "integer"
      ]
    },
    // #region Keywords
    "JustKeywords": {
      "anyOf": [
        {
          "$ref": "#/definitions/JustFn"
        },
        {
          "$ref": "#/definitions/JustIf"
        }
      ]
    },
    "JustFn": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "fn",
          "description": "(fn, name, params: list, body)"
        },
        {
          "type": "string",
          "minLength": 1,
          "description": "name of the function"
        },
        {
          "description": "parameter list",
          // TODO: may loosen parameter list to support macro
          "type": "array",
          "items": {
            "$ref": "#/definitions/JustParameter"
          }
        },
        {
          "description": "function body",
          "$ref": "#"
        }
      ]
    },
    "JustParameter": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "type": "string",
          "description": "Name of the param"
        },
        {
          "type": "string",
          "description": "Type of the param."
        }
      ]
    },
    "JustIf": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "if",
          "description": "(if, condition, then, else)"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    // #endregion keywords
    "JustFunctions": {
      "anyOf": [
        {
          "$ref": "#/definitions/JustRetrieve"
        },
        {
          "$ref": "#/definitions/JustEquality"
        },
        {
          "$ref": "#/definitions/JustPartial"
        },
        {
          "$ref": "#/definitions/JustMap"
        },
        {
          "$ref": "#/definitions/JustList"
        },
        {
          "$ref": "#/definitions/JustBinaryFunctions"
        },
        {
          "$ref": "#/definitions/JustTernaryFunctions"
        },
        {
          "$ref": "#/definitions/JustVariadicFunctions"
        }
      ]
    },
    // #region logical
    "JustLogical": {
      "anyOf": [
        {
          "$ref": "#/definitions/JustNot"
        }
      ]
    },
    "JustNot": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "not",
          "description": "logical not function: not(true) -> false"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    // #endregion logical
    "JustRetrieve": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "ret",
          "$comment": "todo: ret vs eval, when to return string vs variable value",
          "description": "retrieve value defined by `let`: [let, x, 3, [ret, x]] -> 3"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "JustEquality": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "==",
          "description": "equality comparison"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "JustMap": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "map",
          "description": "map(fn, list)"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "JustPartial": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "partial",
          "description": "creates a partial application, [map, [partial, [add 1]], [list, 2, 3]] -> [3, 4]"
        },
        {
          "description": "the function to partial against.",
          "$ref": "#"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "JustBinaryFunctions": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "enum": [
            "<",
            ">",
            "<=",
            ">="
          ],
          "description": "Basic binary functions"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "JustTernaryFunctions": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "enum": [
            "let"
          ],
          "description": "Basic ternary functions:\nlet: declare local variable\n"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "JustList": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "create a list of values",
          "const": "list"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "JustVariadicFunctions": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "Basic variadic functions: and, or, str, list",
          "enum": [
            "or",
            "and"
          ]
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    // #region string
    "JustString": {
      "oneOf": [
        {
          "$ref": "#/definitions/JustStr"
        }
      ]
    },
    "JustStr": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "string concatenation: (str, a, b, c, ...) => abc...",
          "const": "str"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    // #endregion string
    // #region math
    "JustMath": {
      "oneOf": [
        {
          "$ref": "#/definitions/JustNumber"
        },
        {
          "$ref": "#/definitions/JustInteger"
        },
        {
          "$ref": "#/definitions/JustRatio"
        },
        {
          "$ref": "#/definitions/JustAdd"
        },
        {
          "$ref": "#/definitions/JustSubtract"
        },
        {
          "$ref": "#/definitions/JustMultiply"
        },
        {
          "$ref": "#/definitions/JustDivide"
        },
        {
          "$ref": "#/definitions/JustMod"
        }
      ]
    },
    "JustNumber": {
      "type": "number"
    },
    "JustInteger": {
      "type": "integer"
    },
    "JustRatio": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "ratio",
          "description": "A ratio is a number representing the mathematical ratio of two integers"
        },
        {
          "$ref": "#/definitions/JustInteger"
        },
        {
          "ref": "#/definitions/JustInteger"
        }
      ],
      "additionalItems": false
    },
    "JustAdd": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "[+, 1, 2, 3, 4] -> 10",
          "const": "+"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "JustSubtract": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "[-, 10, 1, 2, 3, 4] -> 0",
          "const": "-"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "JustMultiply": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "[*, 1, 2, 3, 4] -> 24",
          "const": "*"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "JustDivide": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "[/, 25, 3, 2] -> 4",
          "const": "/"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "JustMod": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "[mod, 5, 3] => 2",
          "const": "mod"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    }
    // #endregion math
  }
}
