{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/justland/just-func/main/schema/draft-07/schema.jsonc",
  "description": "This is JustFunc, just a functional programming language",
  "oneOf": [
    {
      "$ref": "#/definitions/literal"
    },
    {
      "$ref": "#/definitions/variable"
    },
    {
      "$ref": "#/definitions/Specials"
    },
    {
      "$ref": "#/definitions/CoreModule"
    },
    {
      "$ref": "#/definitions/LogicalModule"
    },
    {
      "$ref": "#/definitions/StringModule"
    },
    {
      "$ref": "#/definitions/MathModule"
    }
  ],
  "definitions": {
    // #region literal
    "literal": {
      "oneOf": [
        {
          "$ref": "#/definitions/boolean"
        },
        {
          "$ref": "#/definitions/string"
        },
        {
          "$ref": "#/definitions/number"
        },
        {
          "$ref": "#/definitions/null"
        },
        {
          "$ref": "#/definitions/object"
        }
      ]
    },
    "boolean": {
      "type": "boolean"
    },
    "string": {
      "type": "string"
    },
    "number": {
      "type": "number"
    },
    "Integer": {
      "type": "integer"
    },
    "null": {
      "type": "null"
    },
    "object": {
      "type": "object"
    },
    // #endregion literal
    // #region variable
    "variable": {
      "type": "array",
      "minItems": 1,
      "maxItems": 2,
      "items": [
        {
          "type": "string",
          "description": "variable identifier",
          "pattern": "[a-z]([a-z-])*[a-z]"
        }
      ],
      "additionalItems": {
        "description": "optional assign value: x = y",
        "$ref": "#"
      }
    },
    // #endregion variable
    // #region specials
    "Specials": {
      "oneOf": [
        {
          "$ref": "#/definitions/Fn"
        },
        {
          "$ref": "#/definitions/If"
        },
        {
          "$ref": "#/definitions/Let"
        },
        // {
        //   "$ref": "#/definitions/Ret"
        // },
        {
          "$ref": "#/definitions/Partial"
        },
        {
          "$ref": "#/definitions/List"
        }
      ]
    },
    "Fn": {
      "type": "array",
      "minItems": 4,
      "maxItems": 4,
      "items": [
        {
          "type": "string",
          "const": "fn",
          "description": "[fn, name, params, body] => void"
        },
        {
          "type": "string",
          "minLength": 1,
          "description": "name of the function"
        },
        {
          "type": "array",
          "description": "parameter list",
          "items": {
            // TODO: may loosen parameter list to support macro
            "$ref": "#/definitions/Parameter"
          }
        },
        {
          "description": "function body",
          "oneOf": [
            {
              "$ref": "#"
            },
            {
              "type": "array",
              "maxItems": 0
            }
          ]
        }
      ],
      "additionalItems": false
    },
    "If": {
      "type": "array",
      "minItems": 3,
      "maxItems": 4,
      "items": [
        {
          "type": "string",
          "const": "if",
          "description": "[if, condition, then, else] => Return<then | else>"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "Let": {
      "type": "array",
      "minItems": 3,
      "maxItems": 3,
      "items": [
        {
          "type": "string",
          "const": "let",
          "description": "[let, [name, value], block] => Return<block>"
        },
        {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "$ref": "#"
            }
          }
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "Ret": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "ret",
          "$comment": "todo: ret vs eval, when to return string vs variable value",
          "description": "expression\nReturn value defined by `let`:\n  [ret,  [let, x, 3, [ret, x]] => 3"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "Partial": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "partial",
          "description": "creates a partial application: [map, [partial, [add 1]], [list, 2, 3]] -> [3, 4]"
        },
        {
          "description": "the function to partial against.",
          "$ref": "#"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "List": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "list",
          "description": "create a list of values"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "NameValuePair": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/string"
          }
        ]
      }
    },
    "Parameter": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "type": "string",
          "description": "Name of the param"
        },
        {
          "type": "string",
          "description": "Type of the param."
        }
      ]
    },
    // #endregion specials
    // #region core
    "CoreModule": {
      "oneOf": [
        {
          "$ref": "#/definitions/Equivalence"
        },
        {
          "$ref": "#/definitions/Inequivalence"
        },
        {
          "$ref": "#/definitions/Equality"
        },
        {
          "$ref": "#/definitions/Inequality"
        },
        {
          "$ref": "#/definitions/Map"
        }
      ]
    },
    "Equivalence": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "===",
          "description": "equivalence comparison"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Inequivalence": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "!==",
          "description": "inequivalence comparison"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Equality": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "==",
          "description": "Equality comparison: [==, true, 1] => true"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Inequality": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "!=",
          "description": "Inequality comparison: [!=, true, 1] => false"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Map": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "map",
          "description": "[map, fn, list] => list"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    // #endregion core
    // #region logical
    "LogicalModule": {
      "oneOf": [
        {
          "$ref": "#/definitions/Not"
        },
        {
          "$ref": "#/definitions/And"
        },
        {
          "$ref": "#/definitions/Or"
        }
      ]
    },
    "Not": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "not",
          "description": "logical not: [not, boolean] => boolean"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "And": {
      "type": "array",
      // clojure (and) => true is weird
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "and",
          "description": "logical and: [and, boolean...] => boolean"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Or": {
      "type": "array",
      // clojure (or) => nil is weird
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "or",
          "description": "logical or: [or, boolean...] => boolean"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    // #endregion logical
    // #region string
    "StringModule": {
      "oneOf": [
        {
          "$ref": "#/definitions/Str"
        }
      ]
    },
    "Str": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "str",
          "description": "string concatenation: [str, a, b, c, ...] => abc..."
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    // #endregion string
    // #region math
    "MathModule": {
      "oneOf": [
        {
          "$ref": "#/definitions/Ratio"
        },
        {
          "$ref": "#/definitions/Add"
        },
        {
          "$ref": "#/definitions/Subtract"
        },
        {
          "$ref": "#/definitions/Multiply"
        },
        {
          "$ref": "#/definitions/Divide"
        },
        {
          "$ref": "#/definitions/Mod"
        },
        {
          "$ref": "#/definitions/GreaterThan"
        },
        {
          "$ref": "#/definitions/LessThan"
        },
        {
          "$ref": "#/definitions/GreaterThanOrEqual"
        },
        {
          "$ref": "#/definitions/LessThanOrEqual"
        }
      ]
    },
    "Ratio": {
      "type": "array",
      "minItems": 3,
      "maxItems": 3,
      "items": [
        {
          "type": "string",
          "const": "ratio",
          "description": "A ratio is a number representing the mathematical ratio of two integers"
        },
        {
          "$ref": "#/definitions/Integer"
        },
        {
          "$ref": "#/definitions/Integer"
        }
      ],
      "additionalItems": false
    },
    "Add": {
      "type": "array",
      "minItems": 1,
      "items": [
        {
          "type": "string",
          "const": "+",
          "description": "[+, 1, 2, 3, 4] => 10"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Subtract": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "-",
          "description": "[-, 10, 1, 2, 3, 4] => 0"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Multiply": {
      "type": "array",
      "minItems": 1,
      "items": [
        {
          "type": "string",
          "const": "*",
          "description": "[*, 1, 2, 3, 4] => 24"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Divide": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "/",
          "description": "[/, 25, 3, 2] => 4"
        }
      ],
      "additionalItems": {
        "$ref": "#"
      }
    },
    "Mod": {
      "type": "array",
      "minItems": 3,
      "maxItems": 3,
      "items": [
        {
          "type": "string",
          "const": "mod",
          "description": "[mod, 5, 3] => 2"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "GreaterThan": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": ">",
          "description": "[>, 1, 2] => false"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "LessThan": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": "<",
          "description": "[<, 1, 2] => true"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "GreaterThanOrEqual": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "const": ">=",
          "description": "[>=, 1, 2] => false"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    },
    "LessThanOrEqual": {
      "type": "array",
      "minItems": 2,
      "items": [
        {
          "type": "string",
          "const": "<=",
          "description": "[<=, 1, 2] => true"
        },
        {
          "$ref": "#"
        },
        {
          "$ref": "#"
        }
      ],
      "additionalItems": false
    }
    // #endregion math
  }
}
